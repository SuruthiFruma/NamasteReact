1)NPM 
NPM is a registry that has n no of packages required for the project.It comes locally into the machine when node is installed

2) Webpack/Parcel
These are project bundlers that is used in frontend application. It comes with many features like code splitting ,bundling, compression etc.

3)parcel-cache
It is the binary file generated by parcel bundler when running the dev build . It creates a cache of the project and reduces the deployment time on next running

4)npx
It is the tool that runs the installed packages installed by npm in

5)Dependencies VS DevDependencies
Dependencies are the ones in the package.json file that will be required in case of both production and development build
Whereas DevDependencies are required only in case of development
EG: React must be in Dependencies while Parcel must a DevDependencies

To install DevDependencies : npm i <package-name> --save-dev

5)Tree Shaking
It is one of the features used by bundlers like parcel that removes the unused code during bundling process

6)HMR
It stands for Hot Module Replacement.It reruns the server given by parcel whenever there is a file change in the code.
This is done by the file watching algorithm (written in C++) that Parcel has 

7)5 superpowers of parcel
--> Can run a dev build on https
--> Differential bundling (Follows different bundling procedure for older browsers)
--> Bundler analyzer for production build 
--> HMR and TreeShaking
--> Compression using gzip and brotli

8)gitignore
It is the file added in the root directory of the project that contains the files not necessary to be pushed to github.
Any files that could be regenrated can be given in gitignore.
It is sufficient to have package.json in the project and rest of the Dependencies files in gitignore

9)package.json VS package-lock.json
package.json comes into the project during npm init.It contains the Dependencies of the project with caret(^) and tilde(~) 
i.e --> It does not have the exact version of the package
package-lock.json comes during npm install. If there are any Dependencies given in package.json, node modules will also be installled.
Node modules contains the actual code of the packages.
package-lock.json contains the Dependencies of those Dependencies in package.json. This is known as transitive Dependencies

10)dist folder
The dist folder generated by the parcel during running the prod build .
To run prod build -> npx parcel build <source-file>
All the minified compressed code is present in dist folder representing the entire application
To run the prod build
-->cd dist
-->npx server

11)BrowsersList
It can be configured in package.json file to denote what are all the browsers and its versions that the app should run on